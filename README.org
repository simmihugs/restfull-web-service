#+TITLE: RESTfull API

Node js server, which lets read and write from/to json file on server

* Install
  #+BEGIN_SRC shell
  npm i
  #+END_SRC
* Run
** use nginx to make api accessible
*** nginx config
   ~/etc/nginx/sites-available/default~
   #+BEGIN_SRC shell
     ##
     # You should look at the following URL's in order to grasp a solid understanding
     # of Nginx configuration files in order to fully unleash the power of Nginx.
     # https://www.nginx.com/resources/wiki/start/
     # https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
     # https://wiki.debian.org/Nginx/DirectoryStructure
     #
     # In most cases, administrators will remove this file from sites-enabled/ and
     # leave it as reference inside of sites-available where it will continue to be
     # updated by the nginx packaging team.
     #
     # This file will automatically load configuration files provided by other
     # applications, such as Drupal or Wordpress. These applications will be made
     # available underneath a path with that package name, such as /drupal8.
     #
     # Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
     ##

     # Default server configuration
     #
     server {
	 listen 80 default_server;
	 listen [::]:80 default_server;

	 # SSL configuration
	 #
	 # listen 443 ssl default_server;
	 # listen [::]:443 ssl default_server;
	 #
	 # Note: You should disable gzip for SSL traffic.
	 # See: https://bugs.debian.org/773332
	 #
	 # Read up on ssl_ciphers to ensure a secure configuration.
	 # See: https://bugs.debian.org/765782
	 #
	 # Self signed certs generated by the ssl-cert package
	 # Don't use them in a production server!
	 #
	 # include snippets/snakeoil.conf;

	 #root /var/www/html;

	 # Add index.php to the list if you are using PHP
	 index index.html index.htm index.nginx-debian.html;

	 server_name _;

	 #location / {
	 #	# First attempt to serve request as file, then
	 #	# as directory, then fall back to displaying a 404.
	 #	try_files $uri $uri/ =404;
	 #}

	 location / {
	     proxy_pass http://localhost:8081;
	     proxy_http_version 1.1;
	     proxy_set_header Upgrade $http_upgrade;
	     proxy_set_header Connection 'upgrade';
	     proxy_set_header Host $host;
	     proxy_cache_bypass $http_upgrade;
	 }

	 # pass PHP scripts to FastCGI server
	 #
	 #location ~ \.php$ {
	 #	include snippets/fastcgi-php.conf;
	 #
	 #	# With php-fpm (or other unix sockets):
	 #	fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
	 #	# With php-cgi (or other tcp sockets):
	 #	fastcgi_pass 127.0.0.1:9000;
	 #}

	 # deny access to .htaccess files, if Apache's document root
	 # concurs with nginx's one
	 #
	 #location ~ /\.ht {
	 #	deny all;
	 #}
     }


     # Virtual Host configuration for example.com
     #
     # You can move that to a different file under sites-available/ and symlink that
     # to sites-enabled/ to enable it.
     #
     #server {
     #	listen 80;
     #	listen [::]:80;
     #
     #	server_name example.com;
     #
     #	root /var/www/example.com;
     #	index index.html;
     #
     #	location / {
     #		try_files $uri $uri/ =404;
     #	}
     #}

   #+END_SRC
*** start nginx
    #+BEGIN_SRC shell
    sudo systemctl start nginx
    #+END_SRC
** start server
   #+BEGIN_SRC shell
   node server.js
   #+END_SRC
** Access site
   Run http://<SERVER-IP>/list-users in browser
*** Output
   #+BEGIN_SRC shell
     {
       "user1": {
	 "name": "mahesh",
	 "password": "password1",
	 "profession": "teacher",
	 "id": 1
       },
       "user2": {
	 "name": "suresh",
	 "password": "password2",
	 "profession": "librarian",
	 "id": 2
       },
       "user3": {
	 "name": "ramesh",
	 "password": "password3",
	 "profession": "clerk",
	 "id": 3
       },
       "user4": {
	 "user4": {
	   "name": "dimon",
	   "password": "password5",
	   "proffession": "student",
	   "id": 4
	 }
       },
       "user5": {
	 "user5": {
	   "name": "franz",
	   "password": "password6",
	   "proffession": "dorftrottel",
	   "id": 5
	 }
       }
     }
   #+END_SRC
*** Access via curl
    #+BEGIN_SRC shell
    curl -X GET http://<SERVER-IP>/list-users
    #+END_SRC
** Add user
   run curl from commandline
   #+BEGIN_SRC shell
     curl --data '{ \"name\":\"franz\", \"password\":\"password6\", \"profession\":\"dorftrottel\" }' -H "Content-Type: application/json" http://<SERVER-IP>/add-user
   #+END_SRC
